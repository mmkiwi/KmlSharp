// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

namespace MMKiwi.KMZipper.KmlFormat.Tests;
#if false
public class KmlRootTests
{

    const string VersionValue = "2.3.0";
    const string HintValue = "Generated by KMZipper";
    [Fact]
    public async Task TestKmlRoot()
    {
        KmlRoot root = new KmlRoot();

        XDocument xDoc = await root.ToXDocument();

        xDoc.Should().HaveRoot(XName.Get("kml", KmlNs.Kml));
    }

    [Fact]
    public async Task TestHintPresent()
    {

        KmlRoot root = new KmlRoot()
        {
            Hint = HintValue
        };

        XDocument xDoc = await root.ToXDocument();

        xDoc.Root.Should().HaveAttribute("hint", HintValue, "Hint parameter is set");
    }

    [Fact]
    public async Task TestHintAbsent()
    {
        KmlRoot root = new KmlRoot()
        {
        };

        XDocument xDoc = await root.ToXDocument();
        xDoc.Root!.Attributes().Should().AllSatisfy(att =>
        {
            att.Name.LocalName.Should().NotBe("hint");
        });
    }

    [Fact]
    public async Task TestVersionPresent()
    {
        KmlRoot root = new KmlRoot()
        {
            Version = new(VersionValue)
        };

        XDocument xDoc = await root.ToXDocument();

        xDoc.Root.Should().HaveAttribute("version", VersionValue, "Version parameter is set");

    }

    [Fact]
    public async Task TestVersionAbsent()
    {
        KmlRoot root = new KmlRoot()
        {
            Version = null
        };

        XDocument xDoc = await root.ToXDocument();
        xDoc.Root!.Attributes().Should().AllSatisfy(att =>
        {
            att.Name.LocalName.Should().NotBe("version");
        });
    }

    [Fact]
    public async Task TestDeserializeAttributes()
    {
        const string rootTest = $"""
            <kml version="{VersionValue}" hint="{HintValue}" xmlns="{KmlNs.Kml}">
                <Document>
                    <name>Testyyy</name>
                </Document>
            </kml>
            """;

        using StringReader sr = new(rootTest);
        using XmlReader xr = XmlReader.Create(sr, new XmlReaderSettings()
        {
            Async = true
        });
        KmlRoot? root = new();
        await root.ReadXmlAsync(xr);

        using AssertionScope scope = new();
        root.Should().NotBeNull();
        root!.Hint.Should().Be(HintValue);
        root!.Version.Should().Be(new KmlVersion(VersionValue));
        root!.RootFeature.Should().BeOfType<KmlDocument>().Which.Name.Should().Be("Testyyy");
    }

    [Fact]
    public async Task TestNetworkLinkControlAbsent()
    {
        KmlRoot root = new KmlRoot()
        {
            Version = null,
            RootFeature =
                new KmlFolder { }

        };

        XDocument xDoc = await root.ToXDocument();
        xDoc.Root!.Elements().Should().AllSatisfy(el =>
        {
            el.Name.LocalName.Should().NotBe("NetworkLinkControl");
        });
    }

    [Fact]
    public async Task TestNetworkLinkControlPresent()
    {
        KmlRoot root = new KmlRoot()
        {
            NetworkLinkControl = new()
        };

        XDocument xDoc = await root.ToXDocument();
        xDoc.Root!.Should().HaveElement(XName.Get("NetworkLinkControl", KmlNs.Kml));
    }


    [Fact]
    public async Task TestFeaturesAbsent()
    {
        KmlRoot root = new KmlRoot()
        {
            Version = null
        };

        XDocument xDoc = await root.ToXDocument();
        xDoc.Root!.Elements().Should().BeEmpty();
    }

    [Fact]
    public async Task TestFeaturesPresent()
    {
        KmlRoot root = new KmlRoot()
        {
            NetworkLinkControl = new(),
            RootFeature =
            new KmlFolder()
            {
                Name = "Test",
                Description = "<html><head><body>Hey &amp; Hi </body></html>",
                ChildFeatures = new()
                {
                    new KmlDocument()
                    {
                        Name="Whoa"
                    }
                }
            }

        };

        XDocument xDoc = await root.ToXDocument();
        xDoc.Root!.Should().HaveElement(XName.Get("Folder", KmlNs.Kml)).And.HaveElement(XName.Get("Document", KmlNs.Kml));
    }
}
#endif